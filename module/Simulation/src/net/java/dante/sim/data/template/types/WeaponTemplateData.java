/*
 * Created on 2006-07-12
 *
 * @author M.Olszewski
 */

package net.java.dante.sim.data.template.types;

import net.java.dante.sim.creator.ObjectsCreator;
import net.java.dante.sim.data.object.ObjectSize;
import net.java.dante.sim.data.template.TemplateData;

/**
 * Class representing data for one type of weapon, used by
 * {@link ObjectsCreator} implementation to create
 * weapon system objects with custom data.
 *
 * @author M.Olszewski
 */
public final class WeaponTemplateData implements TemplateData
{
  /** Range of this {@link WeaponTemplateData}. */
  private double range;
  /** Max speed of projectiles generated by this {@link WeaponTemplateData}. */
  private double maxSpeed;
  /** Explosion range of this {@link WeaponTemplateData}. */
  private double explosionRange;
  /** Minimum damage of this {@link WeaponTemplateData}. */
  private int minDamage;
  /** Maximum damage of this {@link WeaponTemplateData}. */
  private int maxDamage;
  /** Reload time of this {@link WeaponTemplateData}. */
  private long reloadTime;
  /** Size of projectile. */
  private ObjectSize size;



  /**
   * Creates object of {@link WeaponTemplateData} class with specified data.
   *
   * @param weaponRange - weapon's range.
   * @param weaponMaxSpeed - max speed of projectiles generated by this weapon.
   * @param weaponExplosionRange - weapon's explosion range.
   * @param weaponMinDamage - weapon's minimum damage.
   * @param weaponMaxDamage - weapon's maximum damage.
   * @param weaponReloadTime - weapon's reload time.
   * @param projectileSize - projectile's size.
   */
  public WeaponTemplateData(double weaponRange,
                            double weaponMaxSpeed,
                            double weaponExplosionRange,
                            int    weaponMinDamage,
                            int    weaponMaxDamage,
                            long   weaponReloadTime,
                            ObjectSize   projectileSize)
  {
    if (projectileSize == null)
    {
      throw new NullPointerException("Specified projectileSize is null!");
    }
    if (weaponRange <= 0.0)
    {
      throw new IllegalArgumentException("Invalid argument weaponRange - it must be positive real number!");
    }
    if (weaponMaxSpeed <= 0.0)
    {
      throw new IllegalArgumentException("Invalid argument weaponMaxSpeed - it must be positive real number!");
    }
    if (weaponExplosionRange <= 0)
    {
      throw new IllegalArgumentException("Invalid argument weaponExplosionRange - it must be positive real number!");
    }
    if (weaponMinDamage <= 0)
    {
      throw new IllegalArgumentException("Invalid argument weaponMinDamage - it must be positive integer!");
    }
    if (weaponMaxDamage <= 0)
    {
      throw new IllegalArgumentException("Invalid argument weaponMaxDamage - it must be positive integer!");
    }
    if (weaponMaxDamage < weaponMinDamage)
    {
      throw new IllegalArgumentException("Invalid argument weaponMaxDamage - it must be equal to or greater than weaponMinDamage argument!");
    }


    range          = weaponRange;
    maxSpeed       = weaponMaxSpeed;
    explosionRange = weaponExplosionRange;
    minDamage      = weaponMinDamage;
    maxDamage      = weaponMaxDamage;
    reloadTime     = weaponReloadTime;
    size           = projectileSize;
  }


  /**
   * Gets weapon's explosion range.
   *
   * @return Returns weapon's explosion range.
   */
  public double getExplosionRange()
  {
    return explosionRange;
  }

  /**
   * Gets weapon's maximum damage.
   *
   * @return Returns weapon's maximum damage.
   */
  public int getMaxDamage()
  {
    return maxDamage;
  }

  /**
   * Gets maximum speed of projectiles generated by this weapon.
   *
   * @return Returns maximum speed of projectiles generated by this weapon.
   */
  public double getMaxSpeed()
  {
    return maxSpeed;
  }

  /**
   * Gets weapon's minimum damage.
   *
   * @return Returns weapon's minimum damage.
   */
  public int getMinDamage()
  {
    return minDamage;
  }

  /**
   * Gets weapon's range.
   *
   * @return Returns weapon's range.
   */
  public double getRange()
  {
    return range;
  }

  /**
   * Gets weapon's reload time.
   *
   * @return Returns weapon's reload time.
   */
  public long getReloadTime()
  {
    return reloadTime;
  }

  /**
   * Gets the projectile's size.
   *
   * @return Returns the projectile's size.
   */
  public ObjectSize getProjectileSize()
  {
    return size;
  }

  /**
   * @see java.lang.Object#hashCode()
   */
  @Override
  public int hashCode()
  {
    final int PRIME = 37;
    int result = 17;

    long temp = Double.doubleToLongBits(explosionRange);
    result = PRIME * result + (int) (temp ^ (temp >>> 32));
    result = PRIME * result + maxDamage;
    temp = Double.doubleToLongBits(maxSpeed);
    result = PRIME * result + (int) (temp ^ (temp >>> 32));
    result = PRIME * result + minDamage;
    temp = Double.doubleToLongBits(range);
    result = PRIME * result + (int) (temp ^ (temp >>> 32));
    result = PRIME * result + (int) (reloadTime ^ (reloadTime >>> 32));
    result = PRIME * result + ((size == null) ? 0 : size.hashCode());

    return result;
  }

  /**
   * @see java.lang.Object#equals(java.lang.Object)
   */
  @Override
  public boolean equals(Object object)
  {
    boolean equal = (this == object);
    if (!equal && (object instanceof WeaponTemplateData))
    {
      final WeaponTemplateData other = (WeaponTemplateData) object;
      equal = ((maxDamage == other.maxDamage) &&
               (minDamage == other.minDamage) &&
               (Double.doubleToLongBits(maxSpeed) == Double.doubleToLongBits(other.maxSpeed)) &&
               (Double.doubleToLongBits(range) == Double.doubleToLongBits(other.range)) &&
               (Double.doubleToLongBits(explosionRange) == Double.doubleToLongBits(other.explosionRange)) &&
               (size.equals(other.size)));
    }
    return equal;
  }

  /**
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString()
  {
    return (getClass() + "[range=" + range +
        "; explosionRange=" + explosionRange +
        "; maxSpeed=" + maxSpeed +
        "; minDamage=" + minDamage +
        "; maxDamage=" + maxDamage +
        "; reloadTime=" + reloadTime + "]");
  }
}