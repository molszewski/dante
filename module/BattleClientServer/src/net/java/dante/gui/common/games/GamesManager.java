/*
 * Created on 2006-08-21
 *
 * @author M.Olszewski
 */

package net.java.dante.gui.common.games;

import net.java.dante.gui.common.clients.ConnectedClient;

/**
 * Interface for classes managing {@link net.java.dante.gui.common.games.Game} objects.
 *
 * @author M.Olszewski
 */
public interface GamesManager
{
  /**
   * Gets maximum number of games.
   *
   * @return Returns maximum number of games.
   */
  int getMaxGamesCount();

  /**
   * Gets total number of games.
   *
   * @return Returns total number of games.
   */
  int getGamesCount();

  /**
   * Gets all games data.
   *
   * @return Returns all games data.
   */
  GameData[] getGamesData();

  /**
   * Create game for the specified {@link ConnectedClient} object.
   *
   * @param client - the specified {@link ConnectedClient} object.
   */
  void createGame(ConnectedClient client);

  /**
   * Joins game with the specified identifier
   * for the specified {@link ConnectedClient} object.
   *
   * @param client - the specified {@link ConnectedClient} object.
   * @param gameId - the specified game's identifier.
   */
  void joinGame(ConnectedClient client, Integer gameId);

  /**
   * Sets status of the specified {@link ConnectedClient} object to ready
   * or not ready to start the game.
   *
   * @param client - the specified {@link ConnectedClient} object.
   * @param readyStatus - <code>true</code> means that specified
   *        {@link ConnectedClient} object is prepared for game start,
   *        <code>false</code> means that it is not prepared.
   */
  void markAsReady(ConnectedClient client, boolean readyStatus);

  /**
   * Starts game for the specified {@link ConnectedClient} object.
   *
   * @param client - the specified {@link ConnectedClient} object.
   * @param initData - initialization data for the game.
   */
  void startGame(ConnectedClient client, GameInitData initData);

  /**
   * Abandons game for the specified {@link ConnectedClient} object.
   *
   * @param client - the specified {@link ConnectedClient} object.
   */
  void abandonGame(ConnectedClient client);

  /**
   * Method invoked when specified client disconnects from this game manager.
   *
   * @param client - the specified {@link ConnectedClient} object.
   */
  void clientDisconnected(ConnectedClient client);

  /**
   * Method invoked only when game's (denoted by the specified identifier)
   * initialization phase has failed.
   *
   * @param gameId - the specified identifier.
   */
  void gameInitializationFailed(Integer gameId);

  /**
   * Checks whether the specified client is in any game.
   *
   * @param client - the specified {@link ConnectedClient} object.
   *
   * @return Returns <code>true</code> if the specified client is in any game,
   *         <code>false</code> otherwise.
   */
  boolean isInGame(ConnectedClient client);

  /**
   * Gets game's identifier for the specified client if client is taking
   * part in any game. Otherwise <code>null</code> is returned.
   *
   * @param client the specified client.
   *
   * @return Returns game's identifier for the specified client or
   *         <code>null</code> if client is not taking part in any game.
   */
  Integer getGameIdentifier(ConnectedClient client);

  /**
   * Processes the specified {@link GameInputData} object by the {@link Game}
   * in which the specified {@link ConnectedClient} object is taking part.
   *
   * @param client - the specified {@link ConnectedClient} object.
   * @param inputData - the specified {@link GameInputData} object.
   */
  void processGameInput(ConnectedClient client, GameInputData inputData);

  /**
   * Processes the specified {@link GameOutputData} object generated by some
   * {@link Game}.
   * in which the specified {@link ConnectedClient} object is taking part.
   *
   * @param outputData
   */
  void processGameOutput(GameOutputData outputData);

  /**
   * Disposes this games manager by removing all running games and registered
   * listeners. No notification is sent.
   */
  void dispose();

  /**
   * Adds the specified {@link GameDataChangedListener} listener
   * notified about changes in games data.
   *
   * @param listener - listener to add.
   */
  void addGameDataChangedListener(GameDataChangedListener listener);

  /**
   * Removes the specified {@link GameDataChangedListener} listener
   * notified about changes in games data.
   *
   * @param listener - listener to remove.
   */
  void removeGameDataChangedListener(GameDataChangedListener listener);
}